missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainingpredict <- predict(modelfit, trainSA)
testingpredict <- predict(modelfit, testSA)
missClass(trainSA$chd, trainingpredict)
trainSA$chd <- as.numeric(trainSA$chd)
str(trainSA)
trainSA$chd <- as.integer(trainSA$chd)
str(trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
trainingpredict <- predict(modelfit, trainSA)
testingpredict <- predict(modelfit, testSA)
missClass(trainSA$chd, trainingpredict)
sum(((prediction > 0.5)*1) != values)
missClass(testSA$chd,testingpredict)
str(prediction)
str(testingpredict)
missClass(testSA$chd,as.numeric(testingpredict))
missClass(trainSA$chd,as.numeric(trainingpredict))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
trainingpredict <- predict(modFit, trainSA)
head(trainingpredict)
testingpredict <- predict(modFit, testSA)
head(testingpredict)
missClass(trainSA$chd,trainingpredict)
missClass(testSA$chd,testingpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
?varImp
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
install.packages("gbm")
modFit1 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred1 <- predict(modFit, vowel.test)
summary(pred1)
table(pred1, vowel.test$y)
print(modFit)
confusionMatrix(pred1, vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
pred1 <- predict(modFit, vowel.test)
confusionMatrix(pred1, vowel.test$y)$overall
confusionMatrix(pred1, vowel.test$y)
pred2 <- predict(modFit1, vowel.test)
confusionMatrix(pred2, vowel.test$y)
predDF <- data.frame(pred1,pred2, vowel.train$y)
nrow(pred1)
head(pred)
head(pred1)
predDF <- data.frame(pred,pred2, vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
modFo=it1 <- train(y ~ ., method = "rf", data = vowel.train, prox = TRUE)
pred_rf <- predict(modFo=it1, vowel.test)
?predict
modFo=it1
modFit1 <- train(y ~ ., method = "rf", data = vowel.train, prox = TRUE)
pred_rf <- predict(modFo=it1, vowel.test)
modFit1
pred_rf <- predict(modFit1, vowel.test)
pred_rf
confusionMatrix(pred_rf, vowel.test$y)$overall
modFit2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred_gbm <- predict(modFit2, vowel.test)
confusionMatrix(pred_gmb, vowel.test$y)$overall
confusionMatrix(pred_gbm, vowel.test$y)$overall
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
head(predDF)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(training)
modfit_rf <- train(diagnosis ~ ., method = "rf", data = training, prox = TRUE)
modfit_rf <- train(diagnosis ~ ., method = "gbm", data = training)
modfit_rf <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
modfit_rf <- train(diagnosis ~ ., method = "rf", data = training, prox = TRUE)
modfit_gbm <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
modfit_lda <- train(diagnosis ~ ., method = "lda", data = training)
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
pred_rf <- predict(modfit_rf, testing)
pred_gbm <- predict(modfit_gbm, testing)
pred_lda <- predict(modfit_lda, testing)
confusionMatrix(pred_rf, testing$diagnosis)$overall
confusionMatrix(pred_gbm, testing$diagnosis)$overall
confusionMatrix(pred_lda, testing$diagnosis)$overall
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF, prox = TRUE)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
pred_gbm <- predict(mod_gbm, testing)
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall
modfit_gbm <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
pred_gbm <- predict(modfit_gbm, testing)
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(training)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
??bats
install.packages("forecast")
libar
library(forecast)
info(forecast)
version(forecast)
R.version(forecast)
?forecast
?R.version
package_version(forecast)
package_version("forecast")
packageVersion("forecast")
?bats
str(training)
head(training)
head(testing)
head(tstrain)
head(tstrain,10)
?bats
mod_ts <- bats(tstrain)
fcast<-forecast(mod_ts)
summary(fcast)
?forecast
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
summary(fcast)
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
library(kernlab)
data(spam)
set.seed(333)
str(spam)
head(spam$type)
summary(spam$type)
str(spam$type)
smallSpam <- spam[sample(dim(spam)[1],size = 10),]
head(smallSpam)
spamLabel <- (smallSpam$type == "spam") * 1 +1
head(spamLabel)
nrow(smallSpam)
dim(spam)
?sample
plot(smallSpam$capitalAve,col=smallSpam$type)
plot(smallSpam$capitalAve,col=spamLabel)
plot(smallSpam$capitalAve,col=smallSpam$type)
smallSpam$type == "spam"
(smallSpam$type == "spam") * 1
?createTimeSlices
inTrain <- createDataPartition(y = spam$type, p =0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preObj <- preProcess(training[,-58],method = c("center","scale"))
trainCapAvg <- predict(preObj, training[,-58])
head(trainCapAvg)
trainCapAvg <- predict(preObj, training[,-58])$capitalAve
head(trainCapAvg)
testCapAvg <- predict(preObj, testing[,-58])$capitalAve
mean(trainCapAvg)
sd(trainCapAvg)
mean(testCapAvg)
sd(testCapAvg)
testCapAvg <- predict(preObj, testing[,-58])$capitalAve
sd(testCapAvg)
head(testCapAvg)
head(predict(preObj, testing[,-58]))
head(testCapAvg)
hist(trainCapAvg)
head(trainCapAvg)
?hist
head(trainCapAvg, break = 10)
head(trainCapAvg, breaks = 10)
hist(trainCapAvg,breaks = 10)
hist(trainCapAvg,breaks = 20)
preObj1 <- preProcess(training[,-58],method = c("BoxCox"))
trainCapAvg <- predict(preObj, training[,-58])$capitalAve
trainCapAvg1 <- predict(preObj, training[,-58])$capitalAve
hist(trainCapAvg1,breaks = 10)
hist(trainCapAvg1,breaks = 20)
?binom.test
?binom
?rbinom
data(Wage)
head(Wage)
dummies<-dummyVars(Wage ~ jobclass, data = Wage)
?dummyVars
dummies<-dummyVars(wage ~ jobclass, data = Wage)
head(dummies)
head(predict(dummies,newdata = Wage))
when <- data.frame(time = c("afternoon", "night", "afternoon",
"morning", "morning", "morning",
"morning", "afternoon", "afternoon"),
day = c("Mon", "Mon", "Mon",
"Wed", "Wed", "Fri",
"Sat", "Sat", "Fri"))
levels(when$time) <- list(morning="morning",
afternoon="afternoon",
night="night")
levels(when$day) <- list(Mon="Mon", Tue="Tue", Wed="Wed", Thu="Thu",
Fri="Fri", Sat="Sat", Sun="Sun")
## Default behavior:
model.matrix(~day, when)
mainEffects <- dummyVars(~ day + time, data = when)
mainEffects
predict(mainEffects, when[1:3,])
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method = "pca", pcaComp = 2)
trainPC <- predict(preProc, log10(training[,-58]+1))
head(trainPC)
head(preProc)
modFit <- train()
modFit <- train(training$type ~ ., method = "glm", data = trainPC)
modFit <- train($type ~ ., method = "glm", data = trainPC)
modFit <- train(trainPC$type ~ ., method = "glm", data = trainPC)
modFit <- train(training$type ~ ., method = "glm", data = trainPC)
head(training)
modFit <- train(training$type~., method = "glm", data = trainPC)
is.data.frame(trainPC)
?classCenter
?randomForest
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
head(varImp(modelfit),10)
order(varImp(modelfit), decreasing = TRUE)
getwd()
setwd('..')
setwd('数据分析/coursera/dataScience/course8/project/')
train <- read.csv("pml-testing.csv")
head(train)
str(train)
str(train$class)
dim(train)
train <- read.csv("pml-testing.csv")
dim(train)
test <-read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
dim(train)
head(train[,160])
str(train[,160])
inTrain <- createDataPartition(y = train$classe, p = 0.6, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
dim(training)
dim(testing)
11776+7846
nsv <- nearZeroVar(training,saveMetrics = TRUE)
head(nsv
)
is.data.frame(nsv)
info()nsv
info(nsv)
type(nsv)
nsv1 <- nsv[zeroVar == TRUE,]
nsv1 <- nsv["zeroVar" == TRUE,]
head(nsv1)
nrow(nsv)
nrow(nsv1)
head(training)
?read.csv
head(colSums(is.na(dt_testing))
)
head(colSums(is.na(dt_testing)))
head(colSums(is.na(testing)))
head(colSums(is.na(testing)),10)
head(is.na(testing),10)
train <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
validate <- read.csv("pml-testing.csv", na.strings = c("NA", "#DIV/0!", ""))
dim(train)
features <- names(dt_testing[,colSums(is.na(dt_testing)) == 0])[8:159]
features <- names(train[,colSums(is.na(dt_testing)) == 0])[8:159]
features <- names(train[,colSums(is.na(train)) == 0])[8:159]
head(features)
length(featurePlot())
length(feature)
dim(feature)
dim(features)
length(features)
a <- train[,colSums(is.na(train)) == 0]
head(a)
dim(a)
features <- names(train[,colSums(is.na(train)) == 0])
length(features)
head(features)
a <-train[,colSums(is.na(train)) == 0]
head(a)
head(validate)
str(validate$problem_id)
summary(validate$problem_id)
head(training)
head(validate)
dim(training)
dim(validate)
head(features)
length(features)
features[-(1:7),]
features[-(1:7)]
train <- read.csv("pml-training.csv",na.strings = c("NA", "#DIV/0!", ""))
validate <-read.csv("pml-testing.csv",na.strings = c("NA", "#DIV/0!", ""))
# Data cleaning and processing
# remove all columns that contains NA,
# use "colSums(is.na()) == 0" to check whether there are NA in each column
features <- names(train[,colSums(is.na(train)) == 0])
# dataset has no time-dependence, so remove the first 7 features
features <- features[-(1:7)]
# data partitioning
inTrain <- createDataPartition(y = train$classe, p = 0.6, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
dim(training)
dim(testing)
11776+7846
?train
modFit_rpart <- train(classe ~ ., data = training, method = "rpart")
a <- training[,colSums(is.na(training)) == 0]
head(a)
dim(a)
str(a)
inTrain <- createDataPartition(y = train$classe, p = 0.6, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
str(a)
str(training)
train <- train[,colSums(is.na(train)) == 0][,-(1:7)]
dim(train)
validate <- validate[,colSums(is.na(train)) == 0][,-(1:7)]
dim(validate)
validate <- validate[,colSums(is.na(validate)) == 0][,-(1:7)]
dim(validate)
validate <- validate[,colSums(is.na(validate)) == 0]
dim(validate)
validate <-read.csv("pml-testing.csv",na.strings = c("NA", "#DIV/0!", ""))
dim(validate)
validate <- validate[,colSums(is.na(validate)) == 0]
dim(validate)
validate <- validate[,colSums(is.na(validate)) == 0][,-(1:7)]
dim(validate)
dim(train)
inTrain <- createDataPartition(y = train$classe, p = 0.6, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
modFit_rpart <- train(classe ~ ., data = training, method = "rpart")
?rpart
prediction_rpart <- predict(modFit_rpart, testing)
confusionMatrix(prediction_rpart, testing$classe)
?rpart
modFit_rpart1 <- rpart(classe ~ ., data = training)
prediction_rpart1 <- predict(modFit_rpart1, testing)
confusionMatrix(prediction_rpart1, testing$classe)
modFit_rpart1 <- rpart(classe ~ ., data = training,method="class")
prediction_rpart1 <- predict(modFit_rpart1, testing)
confusionMatrix(prediction_rpart1, testing$classe)
prediction_rpart1 <- predict(modFit_rpart1, testing,method="class")
confusionMatrix(prediction_rpart1, testing$classe)
str(prediction_rpart1)
head(prediction_rpart1)
head(prediction_rpart)
modFitDT <- rpart(classe ~ ., data = training, method="class")
prediction <- predict(modFitDT, testing, type = "class")
prediction <- predict(modFitDT, testing, type = "class")
confusionMatrix(prediction, testing$classe)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
prediction <- predict(modFitDT, testing, type = "class")
confusionMatrix(prediction, testing$classe)
?train
modFit_rpart <- train(classe ~ ., data = training, method = "rpart", trControl = trainControl(method = "cv"))
prediction_rpart <- predict(modFit_rpart, testing)
confusionMatrix(prediction_rpart, testing$classe)
modFit_rpart <- train(classe ~ ., data = training, method = "rpart", trControl = trainControl(method = "cv", number = 10))
prediction_rpart <- predict(modFit_rpart, testing)
confusionMatrix(prediction_rpart, testing$classe)
modFit_rpart_new <- train(classe ~ ., data = training, method = "rpart", trControl = trainControl(method = "cv", number = 10))
prediction_rpart_new <- predict(modFit_rpart_new, testing)
confusionMatrix(prediction_rpart_new, testing$classe)
modFit_rpart_new
modFit_rpart
modFit_rpart <- train(classe ~ ., data = training, method = "rpart")
modFit_rpart
modFitDT
modFit_rpart$finalModel
modFit_rpart_new$finalModel
modFit_rpart_new
getModelInfo("rpart")
?rpart.control
modFit_rpart_new <- train(y ~ ., method = "rpart", data = training,
trControl=trainControl(method="cv",number = 10),
tuneGrid=data.frame(cp=0.01))
modFit_rpart_new <- train(classe ~ ., method = "rpart", data = training,
trControl=trainControl(method="cv",number = 10),
tuneGrid=data.frame(cp=0.01))
)
modFit_rpart_new <- train(classe ~ ., method = "rpart", data = training,
trControl=trainControl(method="cv",number = 10),
tuneGrid=data.frame(cp=0.01))
modFit_rpart_new$finalModel
prediction_rpart_new <- predict(modFit_rpart_new, testing)
confusionMatrix(prediction_rpart_new, testing$classe)
modFit_rf <- train(classe ~ ., method = "rf", data = training, trControl=trainControl(method="cv",number = 10))
prediction_rf <- predict(modFit_rf, testing)
confusionMatrix(prediction_rf, testing$classe)
?randomForest
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", number = 10))
prediction_rf <- predict(modFitRF, testing)
confusionMatrix(prediction_rf, testing$classe)
modFit_rf <- train(classe ~ ., method = "rf", data = training, trControl=trainControl(method="cv",number = 10))
Q
modFit_rf <- train(classe ~ ., method = "rf", data = training, prox = TRUE, trControl=trainControl(method="cv",number = 10))
modFit_boosting <- train(classe ~ ., method = "gbm", data = training, verbose = FALSE, trControl=trainControl(method="cv",number = 10))
prediction_boosting <- predict(modFit_boosting, testing)
confusionMatrix(prediction_boosting, testing$classe)
prediction_validate <- predict(modFit_rf, newdata=validate)
prediction_validate <- predict(mmodFitRF, newdata=validate)
prediction_validate <- predict(modFitRF, newdata=validate)
prediction_validate
modFitDecTree <- rpart(classe ~ ., data=TrainSet)
modFitDecTree <- rpart(classe ~ ., data=training)
predictDecTree <- predict(modFitDecTree, newdata=testing)
confusionMatrix(predictDecTree, testing$classe)
predictDecTree
?rpart
str(testing$classe)
modFitDecTree <- rpart(classe ~ ., data=training, method = "class")
predictDecTree <- predict(modFitDecTree, newdata=testing, method = "class")
confusionMatrix(predictDecTree, testing$classe)
head(predictDecTree)
modFitDecTree
predictDecTree <- predict(modFitDecTree, newdata=testing, type = "class")
confusionMatrix(predictDecTree, testing$classe)
predict()
?predict
predict$type
